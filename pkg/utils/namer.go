/*
Copyright 2017 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package utils

import (
	"crypto/md5"
	"fmt"
	"regexp"
	"strconv"
	"strings"
	"sync"

	"github.com/golang/glog"
)

const (
	// This allows sharing of backends across loadbalancers.
	backendPrefix = "k8s-be"
	backendRegex  = "k8s-be-([0-9]+).*"

	// Prefix used for instance groups involved in L7 balancing.
	igPrefix = "k8s-ig"

	// Suffix used in the l7 firewall rule. There is currently only one.
	// Note that this name is used by the cloudprovider lib that inserts
	// its own k8s-fw prefix.
	globalFirewallSuffix = "l7"

	// A delimiter used for clarity in naming GCE resources.
	clusterNameDelimiter = "--"

	// Arbitrarily chosen alphanumeric character to use in constructing
	// resource names, eg: to avoid cases where we end up with a name
	// ending in '-'.
	alphaNumericChar = "0"

	// Names longer than this are truncated, because of GCE
	// restrictions.
	nameLenLimit = 62

	// DefaultBackendKey is the key used to transmit the defaultBackend
	// through a urlmap. It's not a valid subdomain, and it is a catch
	// all path.  TODO: Find a better way to transmit this, once we've
	// decided on default backend semantics (i.e do we want a default
	// per host, per lb etc).
	DefaultBackendKey = "DefaultBackend"

	// maxNEGDescriptiveLabel is the max length for namespace, name and
	// port for neg name.  63 - 5 (k8s and naming schema version prefix)
	// - 16 (cluster id) - 8 (suffix hash) - 4 (hyphen connector) = 30
	maxNEGDescriptiveLabel = 30

	// schemaVersionV1 is the version 1 naming scheme for NEG
	schemaVersionV1 = "1"
)

// Namer handles centralized naming for the cluster.
type Namer struct {
	clusterName  string
	firewallName string
	nameLock     sync.Mutex
}

// NewNamer creates a new namer with a Cluster and Firewall name.
func NewNamer(clusterName, firewallName string) *Namer {
	namer := &Namer{}
	namer.SetClusterName(clusterName)
	namer.SetFirewallName(firewallName)
	return namer
}

// NameComponents is a struct representing the components of a a GCE
// resource name constructed by the namer. The format of such a name
// is: k8s-resource-<metadata, eg port>--uid
type NameComponents struct {
	ClusterName, Resource, Metadata string
}

// SetClusterName sets the UID/name of this cluster.
func (n *Namer) SetClusterName(name string) {
	n.nameLock.Lock()
	defer n.nameLock.Unlock()
	if strings.Contains(name, clusterNameDelimiter) {
		tokens := strings.Split(name, clusterNameDelimiter)
		glog.Warningf("Given name %v contains %v, taking last token in: %+v", name, clusterNameDelimiter, tokens)
		name = tokens[len(tokens)-1]
	}
	glog.Infof("Changing cluster name from %v to %v", n.clusterName, name)
	n.clusterName = name
}

// SetFirewallName sets the firewall name of this cluster.
func (n *Namer) SetFirewallName(firewall_name string) {
	n.nameLock.Lock()
	defer n.nameLock.Unlock()
	if n.firewallName != firewall_name {
		glog.Infof("Changing firewall name from %v to %v", n.firewallName, firewall_name)
		n.firewallName = firewall_name
	}
}

// GetClusterName returns the UID/name of this cluster.
func (n *Namer) GetClusterName() string {
	n.nameLock.Lock()
	defer n.nameLock.Unlock()
	return n.clusterName
}

// GetFirewallName returns the firewall name of this cluster.
func (n *Namer) GetFirewallName() string {
	n.nameLock.Lock()
	defer n.nameLock.Unlock()
	// Retain backwards compatible behavior where firewallName == clusterName.
	if n.firewallName == "" {
		return n.clusterName
	} else {
		return n.firewallName
	}
}

// Truncate truncates the given key to a GCE length limit.
func (n *Namer) Truncate(key string) string {
	if len(key) > nameLenLimit {
		// GCE requires names to end with an albhanumeric, but allows
		// characters like '-', so make sure the trucated name ends
		// legally.
		return fmt.Sprintf("%v%v", key[:nameLenLimit], alphaNumericChar)
	}
	return key
}

func (n *Namer) decorateName(name string) string {
	clusterName := n.GetClusterName()
	if clusterName == "" {
		return name
	}
	return n.Truncate(fmt.Sprintf("%v%v%v", name, clusterNameDelimiter, clusterName))
}

// ParseName parses the name of a resource generated by the namer.
func (n *Namer) ParseName(name string) *NameComponents {
	l := strings.Split(name, clusterNameDelimiter)
	var uid, resource string
	if len(l) >= 2 {
		uid = l[len(l)-1]
	}
	c := strings.Split(name, "-")
	if len(c) >= 2 {
		resource = c[1]
	}
	return &NameComponents{
		ClusterName: uid,
		Resource:    resource,
	}
}

// NameBelongsToCluster checks if a given name is tagged with this
// cluster's UID.
func (n *Namer) NameBelongsToCluster(name string) bool {
	if !strings.HasPrefix(name, "k8s-") {
		return false
	}
	parts := strings.Split(name, clusterNameDelimiter)
	clusterName := n.GetClusterName()
	if len(parts) == 1 {
		if clusterName == "" {
			return true
		}
		return false
	}
	if len(parts) > 2 {
		return false
	}
	return parts[1] == clusterName
}

// BeName constructs the name for a backend.
func (n *Namer) BeName(port int64) string {
	return n.decorateName(fmt.Sprintf("%v-%d", backendPrefix, port))
}

// BePort retrieves the port from the given backend name.
func (n *Namer) BePort(beName string) (string, error) {
	r, err := regexp.Compile(backendRegex)
	if err != nil {
		return "", err
	}
	match := r.FindStringSubmatch(beName)
	if len(match) < 2 {
		return "", fmt.Errorf("unable to lookup port for %v", beName)
	}
	_, err = strconv.Atoi(match[1])
	if err != nil {
		return "", fmt.Errorf("unexpected regex match: %v", beName)
	}
	return match[1], nil
}

// IGName constructs the name for an Instance Group.
func (n *Namer) IGName() string {
	// Currently all ports are added to a single instance group.
	return n.decorateName(igPrefix)
}

// FrSuffix constructs the glbc specific suffix for the FirewallRule.
func (n *Namer) FrSuffix() string {
	firewallName := n.GetFirewallName()
	// The entire cluster only needs a single firewall rule.
	if firewallName == "" {
		return globalFirewallSuffix
	}
	return n.Truncate(fmt.Sprintf("%v%v%v", globalFirewallSuffix, clusterNameDelimiter, firewallName))
}

// FrName constructs the full firewall rule name, this is the name
// assigned by the cloudprovider lib + suffix from glbc, so we don't
// mix this rule with a rule created for L4 loadbalancing.
func (n *Namer) FrName(suffix string) string {
	return fmt.Sprintf("k8s-fw-%s", suffix)
}

// LBName constructs a loadbalancer name from the given key. The key
// is usually the namespace/name of a Kubernetes Ingress.
func (n *Namer) LBName(key string) string {
	// TODO: Pipe the clusterName through, for now it saves code churn
	// to just grab it globally, especially since we haven't decided how
	// to handle namespace conflicts in the Ubernetes context.
	parts := strings.Split(key, clusterNameDelimiter)
	scrubbedName := strings.Replace(key, "/", "-", -1)
	clusterName := n.GetClusterName()
	if clusterName == "" || parts[len(parts)-1] == clusterName {
		return scrubbedName
	}
	return n.Truncate(fmt.Sprintf("%v%v%v", scrubbedName, clusterNameDelimiter, clusterName))
}

// NEGName returns the gce neg name based on the service namespace,
// name and target port.  NEG naming convention:
// k8s-{clusterid}-{namespace}-{name}-{target port}-{hash} Output name
// is at most 63 characters. NEGName tries to keep as much information
// as possible.  WARNING: Controllers depend on the naming pattern to
// retrieve NEG.  Any modification must be backward compatible.
func (n *Namer) NEGName(namespace, name, port string) string {
	trimmedFields := trimFieldsEvenly(maxNEGDescriptiveLabel, namespace, name, port)
	trimedNamespace := trimmedFields[0]
	trimedName := trimmedFields[1]
	trimedPort := trimmedFields[2]
	return fmt.Sprintf("%s-%s-%s-%s-%s", n.NEGPrefix(), trimedNamespace, trimedName, trimedPort, negSuffix(namespace, name, port))
}

func (n *Namer) NEGPrefix() string {
	return fmt.Sprintf("k8s%s-%s", schemaVersionV1, n.GetClusterName())
}

// negSuffix returns hash code with 8 characters
func negSuffix(namespace, name, port string) string {
	return fmt.Sprintf("%x", md5.Sum([]byte(namespace+name+port)))[:8]
}
